AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Resources required to deploy a Grafana dashboard powered by Datazoom.

Parameters:
  AdDecisionServerUrl:
    Type: String
    Description: 'The URL for the ad decision server (ADS).'
  VideoContentSourceUrl:
    Type: String
    Description: 'The URL prefix for the parent manifest for the stream, minus the asset ID.'
  AssetsBucket:
    Type: String
    Description: 'The bucket containing the assets.'
  PrimaryVodSourcePath:
    Type: String
    Description: 'The path to the primary VOD source.'
  SecondaryVodSourcePath:
    Type: String
    Description: 'The path to the secondary VOD source.'
  CloudFrontCachePolicy:
    Type: String
    Default: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CacheOptimized AWS managed cache policy
    Description: 'The ID of the CloudFront cache policy to use.'

Resources:
  ###############################
  #         MediaTailor         #
  ###############################
  MediaTailorConfig:
    Type: AWS::MediaTailor::PlaybackConfiguration
    Properties:
      Name: !Ref AWS::StackName
      AdDecisionServerUrl: !Ref AdDecisionServerUrl
      VideoContentSourceUrl: !Ref VideoContentSourceUrl

  MediaTailorVodSourcePrimary:
    Type: AWS::MediaTailor::VodSource
    Properties:
      SourceLocationName: !Ref MediaTailorSourceLocation
      HttpPackageConfigurations:
        - Path: !Ref PrimaryVodSourcePath
          SourceGroup: main
          Type: HLS
      VodSourceName: !Sub "${AWS::StackName}-primary"

  MediaTailorVodSourceSecondary:
    Type: AWS::MediaTailor::VodSource
    Properties:
      SourceLocationName: !Ref MediaTailorSourceLocation
      HttpPackageConfigurations:
        - Path: !Ref SecondaryVodSourcePath
          SourceGroup: main
          Type: HLS
      VodSourceName: !Sub "${AWS::StackName}-secondary"

  MediaTailorSourceLocation:
    Type: AWS::MediaTailor::SourceLocation
    Properties:
      SourceLocationName: !Ref AWS::StackName
      HttpConfiguration:
        BaseUrl: !Sub "https://${CloudFrontDistribution.DomainName}"

  MediaTailorChannel:
    Type: AWS::MediaTailor::Channel
    Properties:
      ChannelName: !Ref AWS::StackName
      PlaybackMode: LOOP
      Outputs:
        - ManifestName: index
          SourceGroup: main
          HlsPlaylistSettings:
            AdMarkupType:
              - DATERANGE
            ManifestWindowSeconds: 30

  ###############################
  #         CloudFront          #
  ###############################
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !Sub ${AssetsBucket}.s3.${AWS::Region}.amazonaws.com
            Id: !Ref AWS::StackName
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          TargetOriginId: !Ref AWS::StackName
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref CloudFrontCachePolicy

  ###############################
  #           Kinesis           #
  ###############################
  KinesisServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'KinisisServiceRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-logs/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-logs'
              - Effect: Allow
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:ListShards'
                Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${AWS::StackName}-KinesisFirehoseStream'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-KinesisFormattingFunction'

  KinesisLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-logs"

  KinesisFormattingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-functions/
      Handler: kinesisFormatting.handler
      Runtime: nodejs20.x
      Timeout: 60
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        EntryPoints:
          - kinesisFormatting.js

  KinesisFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "${AWS::StackName}-KinesisFirehoseStream"
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt KinesisLogsBucket.Arn
        RoleARN: !GetAtt KinesisServiceRole.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        ErrorOutputPrefix: errors/
        Prefix: logs/
