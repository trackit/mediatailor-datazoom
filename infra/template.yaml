AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Datazoom connector resources

Resources:
  ###############################
  #           Kinesis           #
  ###############################
  KinesisServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'KinisisServiceRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-logs/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-logs'
              - Effect: Allow
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:ListShards'
                Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/PUT-S3-${AWS::StackName}'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource: !GetAtt KinesisFormattingFunction.Arn

  KinesisLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-logs"

  KinesisFormattingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-functions/
      Handler: kinesisFormatting.handler
      Runtime: nodejs20.x
      Timeout: 60
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        EntryPoints:
          - kinesisFormatting.js

  KinesisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/PUT-S3-${AWS::StackName}"
  KinesisLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/PUT-S3-${AWS::StackName}"
      LogStreamName: "DestinationDelivery"

  KinesisFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "PUT-S3-${AWS::StackName}"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub "/aws/kinesisfirehose/PUT-S3-${AWS::StackName}"
          LogStreamName: "DestinationDelivery"
        BucketARN: !GetAtt KinesisLogsBucket.Arn
        RoleARN: !GetAtt KinesisServiceRole.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        ErrorOutputPrefix: errors/
        Prefix: datazoom-connector/
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt KinesisFormattingFunction.Arn

  ###############################
  #            Glue             #
  ###############################
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: GlueServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-logs/datazoom-connector/*'

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref AWS::StackName

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Ref AWS::StackName
      Role: !GetAtt GlueServiceRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Sub "${AWS::StackName}-logs/datazoom-connector/"
